<!DOCTYPE html>
<html>
    <head>
      <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script>
      <script>
        //Javascript to validate the form inputs
        function validateInput(){
          var valid = true;
          document.getElementById("email").style.border = "1px solid #cacaca";
          document.getElementById("firstname").style.border = "1px solid #cacaca";
          document.getElementById("lastname").style.border = "1px solid #cacaca";
          //Use this method to validate the input values e.g. to check the required inputs or to validate input format etc
          if(document.getElementById("email").value == ""){
            document.getElementById("email").style.border = "1px dashed red";
            document.getElementById("missingemail").style.display = "block";
            valid = false;
          }
          //Set the value of the hidden element to true if all your conditions are met
          if(valid){
            document.getElementById("submitted").value = "true";
          }
          return valid;
        }
      </script>
      <!-- in an ideal implementation scenario CSS should be put in s separate code resource file in web studio and  referenced within the landing page-->
      <style>
        .grid-container {
          width : 100%;
          display: grid;
          grid-template-columns: auto auto ;
        }
        .grid-item {
          text-align: left;
        }
        .button-div{
          width : 100%;
          justify-content: center;
          display: flex;
        }
        .formatted-button{
          background-color: black;
          border: none;
          color: white;
          padding: 15px 32px;
          text-align: center;
          text-decoration: none;
          display: inline-block;
          font-size: 16px;
          margin: 4px 2px;
          cursor: pointer;
        }
        .error-text {
          color: red !important;
        }
      </style>
      <!-- Server Side Javascript, we have a try catch block to print the errors from the AMPScript Execution -->
      <script runat="server">
        //Loads the the Core server-side JavaScript library
        Platform.Load("core","1");
        try {
      </script>
      
      %%[
      //start of the ampscript block
    //The logic will execute in page load as well as after the form submission, since it has no conditions
    //Variable Declaration
    var @firstName, @lastName, @email, @submitted, @subscriberRows, @subscriberRow, @UpdateAccount, @NewAccount, @RecordTypeId, @PersonAccountId
    //Variable Initialization, you can also initialize the variables in declaration
    set @firstName = ""
    set @lastName = ""
    set @email = ""
    set @submitted = "false"
    SET @RecordTypeId = "xxxxxxxxxxxxxxxxxx" //This variable will be used later on the creation of the Account record. Make sure you use RecordtypeID in your create calls when you have person account enabled
    //IF ELSE block in AMPScript
    //The below code block executes when we submit the form, as the value of submitted variable is set to true on the button click. 
    IF RequestParameter("submitted") == "true" THEN
      SET @email = QUERYPARAMETER('email')
      SET @firstName = QUERYPARAMETER('firstName')
      SET @lastName = QUERYPARAMETER('lastName')
      //RetrieveSalesforceObjects is used to query salesforce objects. The first parameter is the name of the object, the second parameter is the name of the fields to be returned, third parameter is the where condition. You can include more than one condition , but all of them will be evaluated with AND operator
      SET @subscriberRows = RetrieveSalesforceObjects(
        "Account",
        "Id,FirstName,LastName,Subscribed__pc",
        "PersonEmail", "=", @email )
      // Condition to check if the query has returned any rows
      IF RowCount(@subscriberRows) >= 1 THEN
        //getting the first record from the returned records
        SET @subscriberRow = Row(@subscriberRows, 1)
        // getting a specific field from the row
        SET @PersonAccountId = Field(@subscriberRow, "Id")
        //UpdateSingleSalesforceObject is used to update a single salesforce record. First parameter is the name of the object. Second parameter is the id of the record to be updated. After it the fields to be updated should be included in name value pairs.
        SET @UpdateAccount = UpdateSingleSalesforceObject('Account',@PersonAccountId,'Subscribed__pc',"true","FirstName", @firstname,"LastName", @lastname)
      ELSE
        //The else block is executed when no matching rows are found on Account object. It is going to create a new Account record with CreateSalesforceObject call. The first parameter is name of the object, second parameter is number of fields in your insert call. After that we have the fields in name value pair. if successful the call will return the id of the newly created record.
        SET @NewAccount = CreateSalesforceObject(
                "Account",4,
                "FirstName", @firstname,
                "LastName", @lastname,
                "PersonEmail", @Email,
                "Subscribed__pc","true",
                "RecordTypeId", @RecordTypeId)
      ENDIF
      SET @submitted = "true"
    ENDIF
    //End of the ampscript block
  ]%%
    <script runat="server">
        }
        //catch block will catch any error from the AMPScript execution
        catch (err) {
            Write("Error Message: " + Stringify(err.message) + Stringify(err.description));
        }
    </script>
    </head>
    <body>
      <div style="display:none">
        
      </div>
      <!-- You can also render specific part of the page using IF ELSE block of AMPScript. These are useful, when you are showing the confirmation to the customers after they submit the form-->
      %%[ IF @submitted == "false" THEN ]%%
        <div id="formDiv">
          <form action="%%=RequestParameter('PAGEURL')=%%" method="post">
            <div class="grid-container">
               <div class="grid-item"><label>Email : </label></div>
               <div class="grid-item">
                 <input type="text" name="email" id="email">
                 
               </div>
               <div class="grid-item" id='missingemail' style="display:none;"><p class='error-text'  name='missingemail' >Please Enter Email to Proceed</p></div>
               <div class="grid-item" style="display:none;" id='missingemail1'></div>
               <div class="grid-item"><br/></div>
               <div class="grid-item"><br/></div>
               <div class="grid-item"><label>First name : </label></div>  
               <div class="grid-item"><input type="text" name="firstname" id="firstname"></div>
               <div class="grid-item"><br/></div>
               <div class="grid-item"><br/></div>
               <div class="grid-item"><label>Last name : </label></div>
               <div class="grid-item"><input type="text" name="lastname" id="lastname"></div>  
            </div>
            <br/>
            <div class="button-div">
              <input class="formatted-button" type="submit" value="Submit" onclick="return validateInput();">
            </div>
             <input id="submitted" type="hidden" name="submitted" value="false" />
          </form>
        </div>
      %%[ ENDIF ]%%
      %%[ IF @submitted == "true" THEN ]%%
        <div id="successDiv">
          <span>Thank you for submitting your details.</span>
        </div>
      %%[ ENDIF ]%%
    </body>
</html>
